################################################################################
################################################################################
## This configuration file can be used to extract a copy of JULES, either
## from the current directory or from the Subversion repository, to a remote
## machine and build it there
################################################################################
################################################################################

################################################################################
# Set up the variables that we need to know before we can build
################################################################################
$ncdf_fflags    = 
$ncdf_fflags_ld = 
$ncdf_flag      = 

$fflags        = 
$fflags_ld     = 
$compiler_flag = 

# Settings for the remote machine
$JULES_CFG_SSH{?} = $HERE/ssh/remote-user.cfg
# Settings for the architecture
$JULES_CFG_ARCH{?} = $HERE/arch/x86_64-gfortran-normal.cfg
# NetCDF settings
$JULES_CFG_NCDF{?} = $HERE/ncdf/netcdf-dummy.cfg

################################################################################
# Define the steps that will be run on what machine
################################################################################
steps = extract mirror

include = $JULES_CFG_SSH
mirror.target = ${USER}@${HOSTNAME}:${REMOTE_PATH}
mirror.prop{config-file.steps} = preprocess build

################################################################################
# Configure the extract step
################################################################################
extract.ns = jules
# The location is the root JULES directory
extract.location[jules] = $HERE/../..
# We only want the includes, src and utils directories to be included in the extract,
# and within those directories, we want to ignore UM specific things (and routing for now)
extract.path-excl[jules] = / src/control/um src/initialisation/um     \
                           src/params/um src/science/soil/routing.F90 \
                           src/science/snow/snow_intctl.F90           \
                           src/science/surface/flake_interface.F90
extract.path-incl[jules] = includes src utils

################################################################################
# Configure the preprocess step
################################################################################
preprocess.target{ns} = jules
preprocess.target{category} = include src
preprocess.target{task} = install process
preprocess.prop{file-ext.h} = .h .inc

################################################################################
# Configure the build step
################################################################################
# Build options that are the same for every configuration
build.target = jules.exe
# By default, we ignore any references to the netcdf module, assuming that
# it will be coming from an external source. This assumption is overridden in
# ./ncdf/netcdf-dummy.cfg if compiling without NetCDF (see the file for
# more detail).
build.prop{no-dep.f.module} = netcdf
# Explicit dependencies that need to be defined
build.prop{ns-dep.o}[jules/src/control/standalone/jules.F90] = jules/src/initialisation/standalone \
                                                               jules/src/science                   \
                                                               jules/src/control/imogen
build.prop{dep.o}[jules/src/control/standalone/jules.F90] = control.o next_time.o

################################################################################
# Import/derive build options that depend on architecture or NetCDF configs
################################################################################
include = $JULES_CFG_ARCH
include = $JULES_CFG_NCDF

preprocess.prop{fpp.defs} = $ncdf_flag $compiler_flag L08_1A L19_1A L19_2A A71_1A SCMA BL_DIAG_HACK

build.prop{fc.flags}        = $fflags $ncdf_fflags
build.prop{fc.flags-ld}     = $fflags_ld $ncdf_fflags_ld
build.prop{fc.defs}         = $ncdf_flag $compiler_flag L08_1A L19_1A L19_2A A71_1A SCMA BL_DIAG_HACK
